# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lab_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import *
from PyQt5.QtCore import QTimer,QDateTime
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import random
import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 592)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 190, 254, 351))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.button_9 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('9'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_9.sizePolicy().hasHeightForWidth())
        self.button_9.setSizePolicy(sizePolicy)
        self.button_9.setObjectName("button_9")
        self.gridLayout.addWidget(self.button_9, 0, 2, 1, 1)
        self.button_1 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('1'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_1.sizePolicy().hasHeightForWidth())
        self.button_1.setSizePolicy(sizePolicy)
        self.button_1.setObjectName("button_1")
        self.gridLayout.addWidget(self.button_1, 3, 0, 1, 1)
        self.button_2 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('2'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_2.sizePolicy().hasHeightForWidth())
        self.button_2.setSizePolicy(sizePolicy)
        self.button_2.setObjectName("button_2")
        self.gridLayout.addWidget(self.button_2, 3, 1, 1, 1)
        self.button_6 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('6'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_6.sizePolicy().hasHeightForWidth())
        self.button_6.setSizePolicy(sizePolicy)
        self.button_6.setObjectName("button_6")
        self.gridLayout.addWidget(self.button_6, 2, 2, 1, 1)
        self.button_4 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('4'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_4.sizePolicy().hasHeightForWidth())
        self.button_4.setSizePolicy(sizePolicy)
        self.button_4.setObjectName("button_4")
        self.gridLayout.addWidget(self.button_4, 2, 0, 1, 1)
        self.button_3 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('3'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_3.sizePolicy().hasHeightForWidth())
        self.button_3.setSizePolicy(sizePolicy)
        self.button_3.setObjectName("button_3")
        self.gridLayout.addWidget(self.button_3, 3, 2, 1, 1)
        self.button_8 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('8'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_8.sizePolicy().hasHeightForWidth())
        self.button_8.setSizePolicy(sizePolicy)
        self.button_8.setObjectName("button_8")
        self.gridLayout.addWidget(self.button_8, 0, 1, 1, 1)
        self.button_5 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('5'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_5.sizePolicy().hasHeightForWidth())
        self.button_5.setSizePolicy(sizePolicy)
        self.button_5.setObjectName("button_5")
        self.gridLayout.addWidget(self.button_5, 2, 1, 1, 1)
        self.button_coma = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_dot())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_coma.sizePolicy().hasHeightForWidth())
        self.button_coma.setSizePolicy(sizePolicy)
        self.button_coma.setObjectName("button_coma")
        self.gridLayout.addWidget(self.button_coma, 4, 1, 1, 1)
        self.button_clear = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('C'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_clear.sizePolicy().hasHeightForWidth())
        self.button_clear.setSizePolicy(sizePolicy)
        self.button_clear.setObjectName("button_clear")
        self.gridLayout.addWidget(self.button_clear, 4, 2, 1, 1)
        self.button_0 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('0'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_0.sizePolicy().hasHeightForWidth())
        self.button_0.setSizePolicy(sizePolicy)
        self.button_0.setObjectName("button_0")
        self.gridLayout.addWidget(self.button_0, 4, 0, 1, 1)
        self.button_eq = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_eq())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_eq.sizePolicy().hasHeightForWidth())
        self.button_eq.setSizePolicy(sizePolicy)
        self.button_eq.setObjectName("button_eq")
        self.gridLayout.addWidget(self.button_eq, 5, 0, 1, 1)
        self.button_del = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_del())
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_del.sizePolicy().hasHeightForWidth())
        self.button_del.setSizePolicy(sizePolicy)
        self.button_del.setObjectName("button_del")
        self.gridLayout.addWidget(self.button_del, 5, 1, 1, 1)
        self.button_7 = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('7'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_7.sizePolicy().hasHeightForWidth())
        self.button_7.setSizePolicy(sizePolicy)
        self.button_7.setObjectName("button_7")
        self.gridLayout.addWidget(self.button_7, 0, 0, 1, 1)
        self.button_plus = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but("+"))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_plus.sizePolicy().hasHeightForWidth())
        self.button_plus.setSizePolicy(sizePolicy)
        self.button_plus.setObjectName("button_plus")
        self.gridLayout.addWidget(self.button_plus, 0, 3, 1, 1)
        self.button_minus = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('-'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_minus.sizePolicy().hasHeightForWidth())
        self.button_minus.setSizePolicy(sizePolicy)
        self.button_minus.setObjectName("button_minus")
        self.gridLayout.addWidget(self.button_minus, 2, 3, 1, 1)
        self.button_mul = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('*'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_mul.sizePolicy().hasHeightForWidth())
        self.button_mul.setSizePolicy(sizePolicy)
        self.button_mul.setObjectName("button_mul")
        self.gridLayout.addWidget(self.button_mul, 3, 3, 1, 1)
        self.button_div = QtWidgets.QPushButton(self.gridLayoutWidget, clicked= lambda: self.press_but('/'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.button_div.sizePolicy().hasHeightForWidth())
        self.button_div.setSizePolicy(sizePolicy)
        self.button_div.setObjectName("button_div")
        self.gridLayout.addWidget(self.button_div, 4, 3, 1, 1)
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(670, 460, 125, 80))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.checkBox_2 = QtWidgets.QCheckBox(self.gridLayoutWidget_2)
        self.checkBox_2.setObjectName("checkBox_2")
        self.gridLayout_2.addWidget(self.checkBox_2, 1, 0, 1, 1)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(530, 190, 261, 251))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.graphicsView = Clock()
        brush = QBrush(QColor(0,0,0,255))
        brush.setStyle(Qt.SolidPattern)
        self.verticalLayout.addWidget(self.graphicsView)


        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.verticalLayoutWidget)
        self.lcdNumber_2.setObjectName("lcdNumber_2")

        sizePolicy1 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.lcdNumber_2.sizePolicy().hasHeightForWidth())
        self.lcdNumber_2.setSizePolicy(sizePolicy1)
        self.lcdNumber_2.setDigitCount(8)
        self.lcdNumber_2.setStyleSheet("background-color: rgb(255,0,0); margin:5px; border:1px solid rgb(0, 255, 0); ")
        
        self.verticalLayout.addWidget(self.lcdNumber_2)
        self.lcdNumber_2.setVisible(False)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 771, 161))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setLineWidth(2)
        self.label.setFont(QFont('Arial', 40))
        self.label.setAlignment(QtCore.Qt.AlignRight)
        self.label.setText("0")
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setScaledContents(False)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.design_1 = QPushButton(self.centralwidget, clicked = lambda: self.set_design_1())
        self.design_1.setObjectName(u"design_1")
        self.design_1.setGeometry(QRect(380, 470, 71, 61))
        self.design_2 = QPushButton(self.centralwidget, clicked = lambda: self.set_design_2())
        self.design_2.setObjectName(u"design_2")
        self.design_2.setGeometry(QRect(460, 470, 71, 61))
        self.design_3 = QPushButton(self.centralwidget, clicked = lambda: self.set_design_3())
        self.design_3.setObjectName(u"design_3")
        self.design_3.setGeometry(QRect(540, 470, 71, 61))
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.checkBox_2.toggled['bool'].connect(self.lcdNumber_2.setVisible) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Timery dla zegaruf

        self.timer=QTimer()
        self.timer.timeout.connect(self.showTime)
        self.timer.start(1000)

    def set_design_1(self):
        self.lcdNumber_2.setStyleSheet("background : black")
        self.graphicsView.setStyleSheet("background : black;")

    def set_design_2(self):
        self.lcdNumber_2.setStyleSheet("background : red")
        self.graphicsView.setStyleSheet("background : red;")

    def set_design_3(self):
        self.lcdNumber_2.setStyleSheet("background : blue")
        self.graphicsView.setStyleSheet("background : blue;")

    def showTime(self):
#        self.AnalogClock.repaint()
        self.lcdNumber_2.repaint()
        now = datetime.datetime.now()
        t = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
        self.lcdNumber_2.display(t)
#        self.AnalogClock.setCurrentTime()


    #równa się 
    def press_eq(self):
        screen = self.label.text()
        try:
            answer = eval(screen)
            self.label.setText(str(answer))
        except:
            self.label.setText('ERROR AAAAA')


    #usuwanie jednej cyfry
    def press_del(self):
        screen = self.label.text()
        if len(screen) == 1:
            self.label.setText('0')
        else:
            screen = screen[:-1]
            self.label.setText(f'{screen}')

    #dodałem kropkę
    def press_dot(self):
        screen = self.label.text()
        if screen[-1] == '.':
            pass 
        else: 
            self.label.setText(f'{screen}.')

    def press_but(self, pressed):
        if pressed == 'C':
            self.label.setText('0')
        else: 
            if self.label.text() == '0' and pressed == '0':
                self.label.setText('0')
            else:
                if self.label.text() == '0':
                    self.label.setText(f'{pressed}')
                else:
                    self.label.setText(f'{self.label.text()}{pressed}')


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button_9.setText(_translate("MainWindow", "9"))
        self.button_1.setText(_translate("MainWindow", "1"))
        self.button_2.setText(_translate("MainWindow", "2"))
        self.button_6.setText(_translate("MainWindow", "6"))
        self.button_4.setText(_translate("MainWindow", "4"))
        self.button_3.setText(_translate("MainWindow", "3"))
        self.button_8.setText(_translate("MainWindow", "8"))
        self.button_5.setText(_translate("MainWindow", "5"))
        self.button_coma.setText(_translate("MainWindow", ","))
        self.button_clear.setText(_translate("MainWindow", "C"))
        self.button_del.setText(_translate("MainWindow", "Del"))
        self.button_0.setText(_translate("MainWindow", "0"))
        self.button_eq.setText(_translate("MainWindow", "="))
        self.button_7.setText(_translate("MainWindow", "7"))
        self.button_plus.setText(_translate("MainWindow", "+"))
        self.button_minus.setText(_translate("MainWindow", "-"))
        self.button_mul.setText(_translate("MainWindow", "x"))
        self.button_div.setText(_translate("MainWindow", "/"))
        self.checkBox_2.setText(_translate("MainWindow", "Zegar cyfrowy"))
        self.design_1.setText(QCoreApplication.translate("MainWindow", u"1", None))
        self.design_2.setText(QCoreApplication.translate("MainWindow", u"2", None))
        self.design_3.setText(QCoreApplication.translate("MainWindow", u"3", None))

class Clock(QWidget):
  
    # constructor
    def __init__(self):
        super().__init__()
  
        # creating a timer object
        timer = QTimer(self)
  
        # adding action to the timer
        # update the whole code
        timer.timeout.connect(self.update)
  
        # setting start time of timer i.e 1 second
        timer.start(1000)
  
        # setting window title
        self.setWindowTitle('Clock')
  
        # setting window geometry
        self.setGeometry(200, 200, 300, 300)
  
        # setting background color to the window
        self.setAttribute(QtCore.Qt.WA_StyledBackground, True)
        self.setStyleSheet("background : black;")
  
        # creating hour hand
        self.hPointer = QtGui.QPolygon([QPoint(6, 7),
                                        QPoint(-6, 7),
                                        QPoint(0, -50)])
  
        # creating minute hand
        self.mPointer = QPolygon([QPoint(6, 7),
                                  QPoint(-6, 7),
                                  QPoint(0, -70)])
  
        # creating second hand
        self.sPointer = QPolygon([QPoint(1, 1),
                                  QPoint(-1, 1),
                                  QPoint(0, -90)])
        # colors
        # color for minute and hour hand
        self.bColor = Qt.white
  
        # color for second hand
        self.sColor = Qt.white
  
    # method for paint event
    def paintEvent(self, event):
  
        # getting minimum of width and height
        # so that clock remain square
        rec = 200
  
        # getting current time
        tik = QTime.currentTime()
  
        # creating a painter object
        painter = QPainter(self)
  
  
        # method to draw the hands
        # argument : color rotation and which hand should be pointed
        def drawPointer(color, rotation, pointer):
  
            # setting brush
            painter.setBrush(QBrush(color))
  
            # saving painter
            painter.save()
  
            # rotating painter
            painter.rotate(rotation)
  
            # draw the polygon i.e hand
            painter.drawConvexPolygon(pointer)
  
            # restore the painter
            painter.restore()
  
  
        # tune up painter
        painter.setRenderHint(QPainter.Antialiasing)
  
        # translating the painter
        painter.translate(self.width() / 2, self.height() / 2)
  
        # scale the painter
        painter.scale(rec / 200, rec / 200)
  
        # set current pen as no pen
        painter.setPen(QtCore.Qt.NoPen)
  
  
        # draw each hand
        drawPointer(self.bColor, (30 * (tik.hour() + tik.minute() / 60)), self.hPointer)
        drawPointer(self.bColor, (6 * (tik.minute() + tik.second() / 60)), self.mPointer)
        drawPointer(self.sColor, (6 * tik.second()), self.sPointer)
  
  
        # drawing background
        painter.setPen(QPen(self.bColor))
  
        # for loop
        for i in range(0, 60):
  
            # drawing background lines
            if (i % 5) == 0:
                painter.drawLine(87, 0, 97, 0)
  
            # rotating the painter
            painter.rotate(6)
  
        # ending the painter
        painter.end()

class Example(QWidget):
    
    def __init__(self):
        super(Example, self).__init__()
        
        self.initUI()
        
    def initUI(self):      

        self.setGeometry(300, 300, 280, 170)
        self.setWindowTitle('Points')
        self.show()

    def paintEvent(self, e):

        qp = QtGui.QPainter()
        qp.begin(self)
        self.drawPoints(qp)
        qp.end()
        
    def drawPoints(self, qp):
      
        qp.setPen(QtCore.Qt.red)
        size = self.size()
        
        for i in range(1000):
            x = random.randint(1, size.width()-1)
            y = random.randint(1, size.height()-1)
            qp.drawPoint(x, y)

from PyQt5.Qwt import *


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
